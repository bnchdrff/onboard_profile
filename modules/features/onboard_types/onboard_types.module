<?php
/**
 * @file
 * Code for the OnBoard Types feature.
 */

include_once 'onboard_types.features.inc';

define('ONBOARD_CITY_FIELD', 'og_group_ref');
define('ONBOARD_CITY_GROUP_TYPE', 'taxonomy_term');
define('ONBOARD_CITY_GROUP_FIELD', 'vocabulary_machine_name');
define('ONBOARD_CITY_GROUP_NAME', 'city');
define('ONBOARD_CLERK_ROLE_NAME', 'clerk');


function _onboard_types_entity_is_city_group($entity) {
  if (isset($entity->{ONBOARD_CITY_GROUP_FIELD}) &&
      $entity->{ONBOARD_CITY_GROUP_FIELD} == ONBOARD_CITY_GROUP_NAME) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns the Organic Groups group ID for a user with the given user ID.
 */
function onboard_types_get_user_city($uid) {
  $user = user_load($uid);
  $user_groups = og_get_groups_by_user($user);
  if (!isset($user_groups[ONBOARD_CITY_GROUP_TYPE])) {
    return FALSE;
  }

  $gids = $user_groups[ONBOARD_CITY_GROUP_TYPE]; 
  foreach (entity_load(ONBOARD_CITY_GROUP_TYPE, $gids) as $gid => $entity) {
    if (_onboard_types_entity_is_city_group($entity)) {
      foreach(og_get_user_roles(ONBOARD_CITY_GROUP_TYPE, $gid, $uid) as $role) {      
        if ($role == ONBOARD_CLERK_ROLE_NAME) {
          return $gid;
        }
      }
    }
  }

  // None of the users groups match the city group, or they're not a clerk
  return FALSE;
}

/**
 * Set the the city relationship of a node.
 */
function onboard_types_set_city(&$node, $city_id) {
  $node->{ONBOARD_CITY_FIELD}['und']['0']['target_id'] = $city_id;
}

/**
 * Return the city ID for a node's city.
 */
function onboard_types_get_city_id($node) {
  if (isset($node->{ONBOARD_CITY_FIELD}) &&
      isset($node->{ONBOARD_CITY_FIELD}['und']) &&
      isset($node->{ONBOARD_CITY_FIELD}['und']['0']) &&
      isset($node->{ONBOARD_CITY_FIELD}['und']['0']['target_id'])) {
    return $node->{ONBOARD_CITY_FIELD}['und']['0']['target_id'];
  }

  return FALSE;
}

/**
 * Return TRUE if a node has an associated city.
 */
function onboard_types_has_city($node) {
  return onboard_types_get_city_id($node) !== FALSE;
}

/**
 * Set the value of the "City" field based on the user creating the node.
 */
function onboard_types_set_city_from_user(&$node) {
  $city_id = onboard_types_get_user_city($node->uid);
  if ($city_id) {
    onboard_types_set_city($node, $city_id);
  }
}

function onboard_types_get_board($node) {
  $board_id = $node->field_board['und'][0]['target_id'];
  return entity_load_single('node', $board_id); 
}

function onboard_types_get_member($node) {
  $member_id = $node->field_member['und'][0]['target_id'];
  return entity_load_single('node', $member_id); 
}

/**
 * Return a reasonable default title for a board term.
 */
function onboard_types_board_term_title($node) {
  $member = onboard_types_get_member($node);
  $board = onboard_types_get_board($node);

  if ($member && $board) {
    return $board->title . " / " . $member->title;
  }

  return "Board Term";
}

function onboard_types_node_presave_board($node) {
  if (!onboard_types_has_city($node)) {
    onboard_types_set_city_from_user($node);
  }
}

function onboard_types_node_presave_board_term($node) {
  if (!isset($node->title) || $node->title == '') {
    $node->title = onboard_types_board_term_title($node);
  }

  $board = onboard_types_get_board($node); 
  $city_id = onboard_types_get_city_id($board);
  onboard_types_set_city($node, $city_id);
}

function onboard_types_node_presave_member($node) {
  if (!onboard_types_has_city($node)) {
    onboard_types_set_city_from_user($node);
  }
}

function onboard_types_node_presave($node) {
  if ($node->type == 'board') {
    onboard_types_node_presave_board($node);
  }
  else if ($node->type == 'member') {
    onboard_types_node_presave_member($node);
  }
  else if ($node->type == 'board_term') {
    onboard_types_node_presave_board_term($node);
  }
}

function onboard_types_form_board_term_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide the ``title`` field and make it non-required.  It's value will
  // be populated by ``onboard_types_node_presave()`` above. 
  $form['title']['#access'] = FALSE;
  $form['title']['#required'] = FALSE;
}

/**
 * Remove the revision information form input from node creation/edit forms.
 */
function onboard_types_remove_revision_form(&$form) {
  $form['revision_information']['#access'] = false;
}

/**
 * Hide the city field.
 */
function onboard_types_hide_city_field(&$form) {
  $form['og_group_ref']['#access'] = FALSE;
}

/**
 * Implements hook_form_alter().
 */
function onboard_types_form_alter(&$form, &$form_state, $form_id) {
  $user = $GLOBALS['user'];
  if (($form_id == 'board_node_form' ||
       $form_id === 'member_node_form' || 
       $form_id === 'board_term_node_form') &&
      !in_array('administrator', $user->roles)) {
    // Remove the revision information input for node forms for
    // our custom content types.  Don't do this for admin users.
    onboard_types_remove_revision_form($form);
    onboard_types_hide_city_field($form);
  }
}

/**
 * Implements hook_node_view().
 *
 * Add management links to board type.
 */
function onboard_types_node_view($node, $view_mode, $langcode) {
  // only show management links during certain view modes
  $edity_view_mode = ($view_mode == 'full' || $view_mode == 'teaser');

  if ($edity_view_mode) {
    // remove "read more"
    unset($node->content['links']['node']);

    if ($node->type == 'board') {
      $node->content['links']['add_board_term'] = array(
        '#links' => array(
          array(
            'title' => 'add board term',
            'href' => 'node/add/board-term',
            'query' => array(
              'field_board' => $node->nid,
            ),
          ),
        ),
      );
    }

    if ($node->type == 'board_term') {
      $node->content['links']['manage_board_term'] = array(
        '#links' => array(
          array(
            'title' => 'edit',
            'href' => 'node/' . $node->nid . '/edit',
          ),
          array(
            'title' => 'delete',
            'href' => 'node/' . $node->nid . '/delete',
          ),
        ),
      );
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function onboard_types_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference' && $plugin == 'selection') {
    return 'plugins/selection';
  }
}
