<?php
/**
 * @file
 * Code for the OnBoard Types feature.
 */

include_once 'onboard_types.features.inc';

define('ONBOARD_CITY_FIELD', 'og_group_ref');
define('ONBOARD_CITY_GROUP_TYPE', 'taxonomy_term');
define('ONBOARD_CITY_GROUP_FIELD', 'vocabulary_machine_name');
define('ONBOARD_CITY_GROUP_NAME', 'city');
define('ONBOARD_CLERK_ROLE_NAME', 'clerk');


function _onboard_types_entity_is_city_group($entity) {
  if (isset($entity->{ONBOARD_CITY_GROUP_FIELD}) &&
      $entity->{ONBOARD_CITY_GROUP_FIELD} == ONBOARD_CITY_GROUP_NAME) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns the Organic Groups group ID for a user with the given user ID.
 */
function onboard_types_get_user_city($uid) {
  $user = user_load($uid);
  $user_groups = og_get_groups_by_user($user);
  if (!isset($user_groups[ONBOARD_CITY_GROUP_TYPE])) {
    return FALSE;
  }

  $gids = $user_groups[ONBOARD_CITY_GROUP_TYPE]; 
  foreach (entity_load(ONBOARD_CITY_GROUP_TYPE, $gids) as $gid => $entity) {
    if (_onboard_types_entity_is_city_group($entity)) {
      foreach(og_get_user_roles(ONBOARD_CITY_GROUP_TYPE, $gid, $uid) as $role) {      
        if ($role == ONBOARD_CLERK_ROLE_NAME) {
          return $gid;
        }
      }
    }
  }

  // None of the users groups match the city group, or they're not a clerk
  return FALSE;
}

/**
 * Set the the city relationship of a node.
 */
function onboard_types_set_city(&$node, $city_id) {
  $node->{ONBOARD_CITY_FIELD}['und']['0']['target_id'] = $city_id;
}

/**
 * Return the city ID for a node's city.
 */
function onboard_types_get_city_id($node) {
  if (isset($node->{ONBOARD_CITY_FIELD}) &&
      isset($node->{ONBOARD_CITY_FIELD}['und']) &&
      isset($node->{ONBOARD_CITY_FIELD}['und']['0']) &&
      isset($node->{ONBOARD_CITY_FIELD}['und']['0']['target_id'])) {
    return $node->{ONBOARD_CITY_FIELD}['und']['0']['target_id'];
  }

  return FALSE;
}

/**
 * Return TRUE if a node has an associated city.
 */
function onboard_types_has_city($node) {
  return onboard_types_get_city_id($node) !== FALSE;
}

/**
 * Set the value of the "City" field based on the user creating the node.
 */
function onboard_types_set_city_from_user(&$node) {
  $city_id = onboard_types_get_user_city($node->uid);
  if ($city_id) {
    onboard_types_set_city($node, $city_id);
  }
}

function onboard_types_get_board($node) {
  $board_id = $node->field_board['und'][0]['target_id'];
  return entity_load_single('node', $board_id); 
}

function onboard_types_get_member($node) {
  $member_id = $node->field_member['und'][0]['target_id'];
  return entity_load_single('node', $member_id); 
}

/**
 * Return a reasonable default title for a board term.
 */
function onboard_types_board_term_title($node) {
  $member = onboard_types_get_member($node);
  $board = onboard_types_get_board($node);

  if ($member && $board) {
    return $board->title . " / " . $member->title;
  }

  return "Board Term";
}

function onboard_types_node_presave_board($node) {
  if (!onboard_types_has_city($node)) {
    onboard_types_set_city_from_user($node);
  }
}

function onboard_types_node_presave_board_term($node) {
  if (!isset($node->title) || $node->title == '') {
    $node->title = onboard_types_board_term_title($node);
  }

  $board = onboard_types_get_board($node); 
  $city_id = onboard_types_get_city_id($board);
  onboard_types_set_city($node, $city_id);
}

function onboard_types_node_presave_member($node) {
  if (!onboard_types_has_city($node)) {
    onboard_types_set_city_from_user($node);
  }
}

function onboard_types_node_presave($node) {
  if ($node->type == 'board') {
    onboard_types_node_presave_board($node);
  }
  else if ($node->type == 'member') {
    onboard_types_node_presave_member($node);
  }
  else if ($node->type == 'board_term') {
    onboard_types_node_presave_board_term($node);
  }
}

function onboard_types_form_board_term_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide the ``title`` field and make it non-required.  It's value will
  // be populated by ``onboard_types_node_presave()`` above. 
  $form['title']['#access'] = FALSE;
  $form['title']['#required'] = FALSE;
}

/**
 * Remove the revision information form input from node creation/edit forms.
 */
function onboard_types_remove_revision_form(&$form) {
  $form['revision_information']['#access'] = false;
}

/**
 * Hide the city field.
 */
function onboard_types_hide_city_field(&$form) {
  $form['og_group_ref']['#access'] = FALSE;
}

/**
 * Implements hook_form_alter().
 */
function onboard_types_form_alter(&$form, &$form_state, $form_id) {
  $user = $GLOBALS['user'];
  if (($form_id == 'board_node_form' ||
       $form_id === 'member_node_form' || 
       $form_id === 'board_term_node_form') &&
      !in_array('administrator', $user->roles)) {
    // Remove the revision information input for node forms for
    // our custom content types.  Don't do this for admin users.
    onboard_types_remove_revision_form($form);
    onboard_types_hide_city_field($form);
  }
}

/**
 * Returns true if management links be shown for this node type and view.
 */
function onboard_types_show_management_links($node, $view_mode) {
  $visibility_conditions = array(
    'board' => array(
      'view_modes' => array('full', 'teaser',),
      'permission' => 'create board_term content',
    ),
    'board_term' => array(
      'view_modes' => array('full', 'teaser',),
      'permission' => 'edit own board_term content',
    ),
  );

  if (!array_key_exists($node->type, $visibility_conditions)) {
    return FALSE;
  }

  if (!user_permission($visibility_conditions[$node->type]['permission'])) {
    return FALSE;
  }

  return in_array($view_mode, $visibility_conditions[$node->type]['view_modes']);
}

function onboard_types_management_links($node) {
  if ($node->type == 'board') {
    return array(
      array(
        'title' => 'create board term',
        'href' => 'node/add/board-term',
        'query' => array(
          'field_board' => $node->nid,
          'destination' => current_path(),
        ),
      ),
    );
  }
  else if ($node->type == 'board_term') {
    return array(
      array(
        'title' => 'edit',
        'href' => 'node/' . $node->nid . '/edit',
        'query' => array(
          'destination' => current_path(),
        ),
      ),
      array(
        'title' => 'delete',
        'href' => 'node/' . $node->nid . '/delete',
        'query' => array(
          'destination' => current_path(),
        ),
      ),
    );
  }
  else {
    return array();
  }
}

/**
 * Implements hook_node_view().
 *
 * Add management links to board type.
 */
function onboard_types_node_view($node, $view_mode, $langcode) {
  // only show management links during certain view modes
  if (onboard_types_show_management_links($node, $view_mode)) {
    // remove "read more"
    unset($node->content['links']['node']);

    // @hack: Even though the view mode is checked in
    // onboard_types_show_management_links, we check again here.
    // This is because the links should show up in the full view
    // of a board node, but not in the links region. Instead,
    // we render them below the list of board members
    if ($node->type == 'board' && $view_mode != 'full') {
      $node->content['links']['add_board_term'] = array(
        '#links' => onboard_types_management_links($node),
      );
    }
    else if ($node->type == 'board_term') {
      $node->content['links']['manage_board_term'] = array(
          '#links' => onboard_types_management_links($node),
      );
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function onboard_types_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference' && $plugin == 'selection') {
    return 'plugins/selection';
  }
}

/**
 * Alter the IEF reference form to provide a better UI/UX.
 *
 * DOES NOT implement hook_form_alter() as that hook never gets called for
 * this section of the form tree. However, it's intent is the same as a
 * hook_form_alter implementation.
 *
 */
function onboard_types_alter_inline_entity_form_reference_form(&$form) {
  if ($form['#parents'][0] == 'field_member') {
    // By default, for node entities, the term "Node" is used instead of the
    // bundle name.  We want to use something more specific.
    //
    // @hack: Hard code the label name.  It would be more elegant to use the
    // human-readable bundle name, but that's not easily accessable from this 
    // context.
    $type = 'Member';
    $form['#title'] = t('Add existing @type', array('@type' => $type));
    $form['entity_id']['#title'] = $type;
    $form['actions']['ief_reference_save']['#value'] = t('Add @type', array('@type' => $type));

    // Hide the "Cancel" button
    $form['actions']['ief_reference_cancel']['#access'] = FALSE;
  }
}

/**
 * Alter the IEF add form to provide a better UI/UX.
 *
 * DOES NOT implement hook_form_alter() as that hook never gets called for
 * this section of the form tree. However, it's intent is the same as a
 * hook_form_alter implementation.
 *
 */
function onboard_types_alter_inline_entity_form_add_form(&$form) {
  global $user;

  if ($form['#parents'][0] == 'field_member') {
    // By default, for node entities, the term "Node" is used instead of the
    // bundle name.  We want to use something more specific.
    //
    // @hack: Hard code the label name.  It would be more elegant to use the
    // human-readable bundle name, but that's not easily accessable from this 
    // context.
    $type = 'Member';
    $form['#title'] = t('Add new @type', array('@type' => $type));
    $form['actions']['ief_add_save']['#value'] = t('Create @type', array('@type' => $type));

    // Hide the City field for non-admins
    if (!in_array('administrator', $user->roles)) {
      $form['og_group_ref']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Always show the search form.
 */
function onboard_types_field_widget_inline_entity_form_form_alter(&$element, &$form_state, $context) {
  if ($element['#field_name'] == 'field_member') {
    $ief_id = $element['#ief_id'];
    // @hack: Hard code the label name.  It would be more elegant to use the
    // human-readable bundle name, but that's not easily accessable from this 
    // context.
    $type = 'Member';

    // No referenced entities are listed and no form is open
    if (empty($form_state['inline_entity_form'][$ief_id]['entities']) &&
       empty($form_state['inline_entity_form'][$ief_id]['form'])) {
      $instance = $form_state['inline_entity_form'][$ief_id]['instance'];
      $settings = inline_entity_form_settings($context['field'], $instance);
      $controller = inline_entity_form_get_controller($instance);

      // Build a parents array for this element's values in the form.
      $parents = array_merge($element['#field_parents'], array($element['#field_name'], $element['#language']));

      // Get the langcode of the parent entity.
      $parent_langcode = entity_language($element['#entity_type'], $element['#entity']);

      // Show the form for adding an existin element (reference form)
      $form_state['inline_entity_form'][$ief_id]['form'] = 'ief_add_existing';
      $element['form'] = array(
        '#type' => 'fieldset',
        '#attributes' => array('class' => array('ief-form', 'ief-form-bottom')),
        // Identifies the IEF widget to which the form belongs.
        '#ief_id' => $ief_id,
        // Used by Field API and controller methods to find the relevant
        // values in $form_state.
        '#parents' => array_merge($parents, array('form')),
        // Pass the current entity type.
        '#entity_type' => $settings['entity_type'],
        // Pass the langcode of the parent entity,
        '#parent_language' => $parent_langcode,
      );
      $element['form'] += inline_entity_form_reference_form($controller, $element['form'], $form_state);
      onboard_types_alter_inline_entity_form_reference_form($element['form']);

      // Remove the "Add existing" button
      unset($element['actions']['ief_add_existing']);

      // Replace "node" with "Member" in the "Add new ..." button
      $element['actions']['ief_add']['#value'] = t('Add new @type', array('@type' => $type));
    }
    else if ($form_state['inline_entity_form'][$ief_id]['form'] == 'add') {
      // Add form is shown
      onboard_types_alter_inline_entity_form_add_form($element['form']);
    }
  }
}

/**
 * Implements hook_user_login().
 *
 * If user is a clerk, redirect to user/boards after login.
 */
function onboard_types_user_login(&$edit, $account) {
  $is_edit_page = (isset($_POST['form_id']) && $_POST['form_id'] == 'user_pass_reset');
  $is_clerk = in_array('clerk', $account->roles);

  if ($is_clerk && !$is_edit_page) {
    $_GET['destination'] = 'user/boards';
  }
}

// See http://www.thedavidmeister.info/post/exporting-and-maintaining-custom-date-formats-drupal-7
// for the date format hack backstory.

/**
 * Purge date formats cache.
 *
 * Call via hook_flush_caches() or something similar.
 */
function _onboard_types_purge_date_formats() {
  $formats = system_get_date_formats('onboard_date_type_human_short');
  variable_set('date_format_' . 'onboard_date_type_human_short', 'F j, Y');

  // Date formats without a dfid are being read directly from code. We can use
  // the existence of this value to detect "ghost" formats that are not managed
  // in this file.
  if (!empty($format['dfid'])) {
    system_date_format_delete($format['dfid']);
  }
}

/**
 * Implements hook_date_formats().
 */
function onboard_types_date_formats() {
  $formats = array();
  $formats[] = array(
    'type' => 'onboard_date_type_human_short',
    'format' => 'F j, Y',
    'locales' => array(),
  );
  return $formats;
}

/**
 * Implements hook_date_format_types().
 */
function onboard_types_date_format_types() {
  $types = array();
  $types['onboard_date_type_human_short'] = t('Human date (F j, Y)');
  return $types;
}

function onboard_types_flush_caches() {
  _onboard_types_purge_date_formats();
}
